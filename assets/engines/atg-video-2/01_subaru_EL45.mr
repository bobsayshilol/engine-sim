import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()
label cycle(2 * 360 * units.deg)

/*
Subaru
======
REAR
	12
11
	10
9
	8
7
	6
5
	4
3
	2
1
FRONT
Firing order: 1 11 3 7 5 9 2 12 4 8 6 10
*/

private node turbulence_to_flame_speed_ratio {
    alias output __out:
        function(5.0)
            .add_sample(0.0, 1.0 * 3.0)
            .add_sample(5.0, 1.0 * 1.5 * 5.0)
            .add_sample(10.0, 1.0 * 1.5 * 10.0)
            .add_sample(15.0, 1.1 * 1.5 * 15.0)
            .add_sample(20.0, 1.25 * 1.5 * 20.0)
            .add_sample(25.0, 1.25 * 1.5 * 25.0)
            .add_sample(30.0, 1.25 * 1.5 * 30.0)
            .add_sample(35.0, 1.25 * 1.5 * 35.0)
            .add_sample(40.0, 1.25 * 1.5 * 40.0)
            .add_sample(45.0, 1.25 * 1.5 * 45.0);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

private node head {
    input intake_camshaft;
    input exhaust_camshaft;
    //input chamber_volume: 67 * units.cc;
    //input chamber_volume: 50 * units.cc;
    input chamber_volume: 41 * units.cc;
    input intake_runner_volume: 149.6 * units.cc;
    input intake_runner_cross_section_area: 1.75 * units.inch * 1.75 * units.inch;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 1.25 * units.inch * 1.25 * units.inch;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 58 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 103 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 156 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 214 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 249 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 268 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 281 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 37 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 72 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 196 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 246 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

private node cam {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 114 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;  
    input advance: 0 * units.deg; 
    input base_radius: 1.0 * units.inch;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    output intake_cam_2: _intake_cam_2;
    output exhaust_cam_2: _exhaust_cam_2;

    camshaft_parameters params (
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_2(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_2(params, lobe_profile: exhaust_lobe_profile)

    label rot180(180 * units.deg)
    label rot360(360 * units.deg)
    /*
    Subaru
    ======
    REAR
	    12
    11
	    10
    9
	    8
    7
	    6
    5
	    4
    3
	    2
    1
    FRONT
    Firing order: 1 11 3 7 5 9 2 12 4 8 6 10
    		  0 1  2 3 4 5 6 7  8 9 1011
    */
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + (0.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (2.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (4.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (3.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (5.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (1.0 / 12.0) * cycle)
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + (0.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (2.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (4.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (3.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (5.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (1.0 / 12.0) * cycle)

    _exhaust_cam_2
        .add_lobe(rot360 - exhaust_lobe_center + (6.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (8.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (10.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (9.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (11.0 / 12.0) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center + (7.0 / 12.0) * cycle)
    _intake_cam_2
        .add_lobe(rot360 + intake_lobe_center + (6.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (8.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (10.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (9.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (11.0 / 12.0) * cycle)
        .add_lobe(rot360 + intake_lobe_center + (7.0 / 12.0) * cycle)
}

public node subaru {
    alias output __out: engine;

    engine engine(
        name: "Subaru EL37",
        starter_torque: 70 * units.lb_ft,
        starter_speed: 500 * units.rpm,
        redline: 6500 * units.rpm,
        fuel: fuel(
            max_burning_efficiency: 0.9,
            turbulence_to_flame_speed_ratio: turbulence_to_flame_speed_ratio()
        ),
        throttle_gamma: 2.0,
        hf_gain: 0.01,
        noise: 1.0,
        jitter: 0.5,
        //simulation_frequency: 10000
        simulation_frequency: 8000
    )

    wires wires()

    label stroke(79 * units.mm)
    //label bore(99.5 * units.mm)
    label bore(77.7 * units.mm)
    label rod_length(5.142 * units.inch)
    label rod_mass(535 * units.g)
    label compression_height(1.0 * units.inch)
    label crank_mass(9.39 * units.kg)
    label flywheel_mass(6.8 * units.kg)
    label flywheel_radius(6 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius) * 2
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 10 * units.kg, radius: 6.0 * units.cm)
    )

    crankshaft c1(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 1.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 180 * units.deg
        //tdc: 0 * units.deg
    )
    /*
    Subaru
    ======
    REAR
	    10
    9
	    8
    7
	    6
    5
	    4
    3
	    2
    1
    FRONT
    Firing order: 1 10 3 6 7 2 9 4 5 8
    */
    /*
    Subaru
    ======
    REAR
	    12
    11
	    10
    9
	    8
    7
	    6
    5
	    4
    3
	    2
    1
    FRONT
    Firing order: 1 11 3 7 5 9 2 12 4 8 6 10
    		  0 1  2 3 4 5 6 7  8 9 1011
    */
    rod_journal rj1(angle: 0.0 * units.deg)
    rod_journal rj11(angle: 60.0 * units.deg)
    rod_journal rj3(angle: 120.0 * units.deg)
    rod_journal rj7(angle: 180.0 * units.deg)
    rod_journal rj5(angle: 240.0 * units.deg)
    rod_journal rj9(angle: 300.0 * units.deg)

    rod_journal rj2(angle: (0.0 + 180.0) * units.deg)
    rod_journal rj12(angle: (60.0 + 180.0) * units.deg)
    rod_journal rj4(angle: (120.0 + 180.0) * units.deg)
    rod_journal rj8(angle: (180.0 + 180.0) * units.deg)
    rod_journal rj6(angle: (240.0 + 180.0) * units.deg)
    rod_journal rj10(angle: (300.0 + 180.0) * units.deg)
    c1
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)
        .add_rod_journal(rj7)
        .add_rod_journal(rj8)
        .add_rod_journal(rj9)
        .add_rod_journal(rj10)
        .add_rod_journal(rj11)
        .add_rod_journal(rj12)

    piston_parameters piston_params(
        mass: (414 + 152) * units.g, // 414 - piston mass, 152 - pin weight
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    intake intake(
        plenum_volume: 1.325 * units.L,
        plenum_cross_section_area: 20.0 * units.cm2,
        //intake_flow_rate: k_carb(400.0),
        intake_flow_rate: k_carb(700.0),
        runner_flow_rate: k_carb(100.0),
        runner_length: 12.0 * units.inch,
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.9978,
        velocity_decay: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 40.0 * units.inch,
        primary_flow_rate: k_carb(400.0),
        velocity_decay: 1.0
    )

    exhaust_system exhaust1(
        es_params,
        length: 500 * units.mm,
        audio_volume: 0.5 * 0.02,
        impulse_response: ir_lib.minimal_muffling_02
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )

    cylinder_bank b1(bank_params, angle: 90.0 * units.deg)
    cylinder_bank b2(bank_params, angle: -90.0 * units.deg)
    /*
    Subaru
    ======
    REAR
	    12
    11
	    10
    9
	    8
    7
	    6
    5
	    4
    3
	    2
    1
    FRONT
    Firing order: 1 11 3 7 5 9 2 12 4 8 6 10
    		  0 1  2 3 4 5 6 7  8 9 1011
    */
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire1,
            primary_length: 2.0 * units.inch,
            sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire3,
            primary_length: 3.0 * units.inch,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5,
            primary_length: 3.0 * units.inch,
            sound_attenuation: 1.1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj7,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire7,
            primary_length: 3.0 * units.inch,
            sound_attenuation: 1.3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj9,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire9,
            primary_length: 3.0 * units.inch,
            sound_attenuation: 1.5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj11,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire11,
            primary_length: 3.0 * units.inch,
            sound_attenuation: 1.7
        )
        .set_cylinder_head(
            head(
                flip_display: true,
                intake_camshaft: camshaft.intake_cam_1,
                exhaust_camshaft: camshaft.exhaust_cam_1)
        )
    b2
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2,
            primary_length: 3.0 * units.inch,
            sound_attenuation: 1.1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4,
            primary_length: 5.0 * units.inch,
            sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6,
            primary_length: 5.0 * units.inch,
            sound_attenuation: 0.7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj8,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8,
            primary_length: 5.0 * units.inch,
            sound_attenuation: 0.5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj10,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire10,
            primary_length: 5.0 * units.inch,
            sound_attenuation: 0.3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.002)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj12,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire12,
            primary_length: 5.0 * units.inch,
            sound_attenuation: 0.1
        )
        .set_cylinder_head(
            head(
                flip_display: false,
                intake_camshaft: camshaft.intake_cam_2,
                exhaust_camshaft: camshaft.exhaust_cam_2)
        )

    engine
        .add_cylinder_bank(b1)
        .add_cylinder_bank(b2)

    engine.add_crankshaft(c1)

    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 232 * units.deg,
        gamma: 2.0,
        lift: 9.78 * units.mm,
        steps: 100
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 236 * units.deg,
        gamma: 2.0,
        lift: 9.60 * units.mm,
        steps: 100
    )

    //camshaft cam(
    cam camshaft(
        lobe_profile: "N/A",

        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        intake_lobe_center: 117 * units.deg,
        exhaust_lobe_center: 112 * units.deg,
        base_radius: (34.0 / 2) * units.mm
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 25 * units.deg)
        .add_sample(1000 * units.rpm, 25 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 40 * units.deg)
        .add_sample(4000 * units.rpm, 40 * units.deg)

    ignition_module ignition_module(
        timing_curve: timing_curve,
        rev_limit: 6800 * units.rpm,
        limiter_duration: 0.16)

    //Firing order: 1 11 3 7 5 9 2 12 4 8 6 10
    ignition_module
            .connect_wire(wires.wire1, (0.0 / 12.0) * cycle)
            .connect_wire(wires.wire11, (1.0 / 12.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 12.0) * cycle)
            .connect_wire(wires.wire7, (3.0 / 12.0) * cycle)
            .connect_wire(wires.wire5, (4.0 / 12.0) * cycle)
            .connect_wire(wires.wire9, (5.0 / 12.0) * cycle)
            .connect_wire(wires.wire2, (6.0 / 12.0) * cycle)
            .connect_wire(wires.wire12, (7.0 / 12.0) * cycle)
            .connect_wire(wires.wire4, (8.0 / 12.0) * cycle)
            .connect_wire(wires.wire8, (9.0 / 12.0) * cycle)
            .connect_wire(wires.wire6, (10.0 / 12.0) * cycle)
            .connect_wire(wires.wire10, (11.0 / 12.0) * cycle)

    engine.add_ignition_module(ignition_module)
}

label car_mass(2700 * units.lb)

private node impreza {
    alias output __out:
        vehicle(
            mass: 2700 * units.lb,
            drag_coefficient: 0.3,
            cross_sectional_area: (72 * units.inch) * (56 * units.inch),
            diff_ratio: 3.9,
            tire_radius: 10 * units.inch,
            rolling_resistance: 0.015 * car_mass * 9.81 
        );
}

private node impreza_transmission {
    alias output __out:
        transmission(
            //max_clutch_torque: 300 * units.lb_ft
            max_clutch_torque: 900 * units.lb_ft
        )
        .add_gear(3.636)
        .add_gear(2.375)
        .add_gear(1.761)
        .add_gear(1.346)
        .add_gear(0.971)
        .add_gear(0.756);
}

public node main {
    set_engine(subaru())
    set_vehicle(impreza())
    set_transmission(impreza_transmission())
}
