import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()
label cycle(720 * units.deg)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

private node f312_t_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 21.7 * units.cc;
    input intake_runner_volume: 150.0 * units.cc;
    input intake_runner_cross_section_area: 10.0 * units.cm2;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 10.0 * units.cm2;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 50 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 110 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 190 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 200 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(500 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(550 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(600 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(650 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(700 * lift_scale, 280 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 50 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 110 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 200 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(500 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(550 * lift_scale, 300 * flow_attenuation)
        .add_flow_sample(600 * lift_scale, 300 * flow_attenuation)
        .add_flow_sample(650 * lift_scale, 300 * flow_attenuation)
        .add_flow_sample(700 * lift_scale, 300 * flow_attenuation)

    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

private node f312_t_camshaft {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 140 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0 * units.deg;
    input base_radius: 10.0 * units.mm;

    output intake_cam_1: _intake_cam_1;
    output intake_cam_2: _intake_cam_2;
    output exhaust_cam_1: _exhaust_cam_1;
    output exhaust_cam_2: _exhaust_cam_2;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)
	
    camshaft _intake_cam_2(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_2(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 12.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center)
	.add_lobe((rot360 - exhaust_lobe_center) + 8 * rot)
	.add_lobe((rot360 - exhaust_lobe_center) + 4 * rot)
	.add_lobe((rot360 - exhaust_lobe_center) + 10 * rot)
	.add_lobe((rot360 - exhaust_lobe_center) + 2 * rot)
	.add_lobe((rot360 - exhaust_lobe_center) + 6 * rot)
		
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe((rot360 + intake_lobe_center) + 8 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 4 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 10 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 2 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 6 * rot)
		
    _exhaust_cam_2
        .add_lobe((rot360 - exhaust_lobe_center) + 3 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 11 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 7 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 1 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 5 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 9 * rot)
		
    _intake_cam_2
        .add_lobe((rot360 + intake_lobe_center) + 3 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 11 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 7 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 1 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 5 * rot)
        .add_lobe((rot360 + intake_lobe_center) + 9 * rot)
}

public node t_f312 {
    alias output __out: engine;

    engine engine(
        name: "Ferrari 312T Flat 12",
        starter_torque: 80 * units.N,
        starter_speed: 150 * units.rpm,
        redline: 13200 * units.rpm,
	fuel: fuel(
            max_turbulence_effect: 0.5,
	    // added?
	    max_dilution_effect: 5.0,
            burning_efficiency_randomness: 0.05,
            max_burning_efficiency: 0.95
	),
        throttle_gamma: 2.0,
        hf_gain: 0.002,
        noise: 0.8,
        jitter: 0.75,
        //simulation_frequency: 10000
        simulation_frequency: 5000
    )

    wires wires()
	
    label stroke(49.6 * units.mm)
    label bore(80 * units.mm)
    label rod_length(112 * units.mm)
    label compression_height(30 * units.mm)

    crankshaft c1(
        throw: stroke / 2,
        flywheel_mass: 20 * units.kg,
        mass: 20 * units.kg,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.2 * 0.5,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 0 * units.deg
    )

    rod_journal rj1(angle: 0.0 * units.deg)
	rod_journal rj2(angle: 120.0 * units.deg)
	rod_journal rj3(angle: 240.0 * units.deg)
	rod_journal rj4(angle: 240.0 * units.deg)
	rod_journal rj5(angle: 120.0 * units.deg)
	rod_journal rj6(angle: 0.0 * units.deg)
	
    c1
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)

    piston_parameters piston_params(
        mass: 200 * units.g,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: rod_length
    )

    intake intake(
	plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 10.0 * units.cm2,
        intake_flow_rate: k_carb(1500.0),
        runner_flow_rate: k_carb(217.0),
        runner_length: 100.0 * units.mm,
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.9974,
        velocity_decay: 0.1
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 150.0 * units.mm,
        primary_flow_rate: k_carb(600.0),
        velocity_decay: 0.2,
        volume: 10.0 * units.L
    )

    exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust2(es_params, audio_volume: 0.1, impulse_response: ir_lib.default_0)
    exhaust_system exhaust3(es_params, audio_volume: 0.1, impulse_response: ir_lib.default_0)
    exhaust_system exhaust4(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust5(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust6(es_params, audio_volume: 0.1, impulse_response: ir_lib.default_0)

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )

    cylinder_bank b1(bank_params, angle: -90 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire1,
	    sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust2,
            ignition_wire: wires.wire2,
	    sound_attenuation: 0.7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust3,
            ignition_wire: wires.wire3,
	    sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust4,
            ignition_wire: wires.wire4,
	    sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust5,
            ignition_wire: wires.wire5,
	    sound_attenuation: 0.6
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust6,
            ignition_wire: wires.wire6,
	    sound_attenuation: 0.7
        )

    cylinder_bank b2(bank_params, angle: 90 * units.deg)
    b2
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire7,
	    sound_attenuation: 0.4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust2,
            ignition_wire: wires.wire8,
	    sound_attenuation: 0.8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust3,
            ignition_wire: wires.wire9,
	    sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust4,
            ignition_wire: wires.wire10,
	    sound_attenuation: 0.7
        )
	    .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust5,
            ignition_wire: wires.wire11,
	    sound_attenuation: 0.6
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.05)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust6,
            ignition_wire: wires.wire12,
	    sound_attenuation: 0.8
        )

    engine
        .add_cylinder_bank(b1)
        .add_cylinder_bank(b2)

    engine.add_crankshaft(c1)
	
    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 174 * units.deg,
        gamma: 0.6,
        lift: 10.5 * units.mm,
        steps: 100
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 174 * units.deg,
        gamma: 0.6,
        lift: 10.5 * units.mm,
        steps: 100
    )
	
	f312_t_camshaft camshaft(
        lobe_profile: "N/A",
        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        intake_lobe_center: 140 * units.deg,
        exhaust_lobe_center: 140 * units.deg,
        base_radius: 10 * units.mm
    )

    b1.set_cylinder_head (
        f312_t_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )
    b2.set_cylinder_head (
        f312_t_head(
            intake_camshaft: camshaft.intake_cam_2,
            exhaust_camshaft: camshaft.exhaust_cam_2,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
	.add_sample(1000 * units.rpm, 10 * units.deg)
	.add_sample(2000 * units.rpm, 18 * units.deg)
        .add_sample(3000 * units.rpm, 20 * units.deg)
	.add_sample(4000 * units.rpm, 24 * units.deg)
	.add_sample(5000 * units.rpm, 28 * units.deg)
	.add_sample(6000 * units.rpm, 32 * units.deg)
        .add_sample(7000 * units.rpm, 36 * units.deg)
	.add_sample(8000 * units.rpm, 40 * units.deg)
	.add_sample(9000 * units.rpm, 44 * units.deg)
	.add_sample(10000 * units.rpm, 48 * units.deg)
	.add_sample(11000 * units.rpm, 52 * units.deg)
	.add_sample(12000 * units.rpm, 56 * units.deg)

    ignition_module ignition_module(
        timing_curve: timing_curve,
        rev_limit: 13200 * units.rpm,
        limiter_duration: 0.03)
    ignition_module
            .connect_wire(wires.wire1, (0.0 / 12.0) * cycle)
            .connect_wire(wires.wire10, (1.0 / 12.0) * cycle)
            .connect_wire(wires.wire5, (2.0 / 12.0) * cycle)
            .connect_wire(wires.wire7, (3.0 / 12.0) * cycle)
	    .connect_wire(wires.wire3, (4.0 / 12.0) * cycle)
	    .connect_wire(wires.wire11, (5.0 / 12.0) * cycle)
            .connect_wire(wires.wire6, (6.0 / 12.0) * cycle)
            .connect_wire(wires.wire9, (7.0 / 12.0) * cycle)
            .connect_wire(wires.wire2, (8.0 / 12.0) * cycle)
            .connect_wire(wires.wire12, (9.0 / 12.0) * cycle)
            .connect_wire(wires.wire4, (10.0 / 12.0) * cycle)
	    .connect_wire(wires.wire8, (11.0 / 12.0) * cycle)

    engine.add_ignition_module(ignition_module)
}

private node f312_t_transmission {
    alias output __out: transmission;

    transmission transmission(
        max_clutch_torque: 400 * units.N
    )

    transmission.add_gear(3.8)
    transmission.add_gear(2.6)
    transmission.add_gear(2.0)
    transmission.add_gear(1.6)
    transmission.add_gear(1.2)
}

private node f312_t {
    alias output __out:
        vehicle(
            mass: 575 * units.kg,
            drag_coefficient: 0.3,
            cross_sectional_area: (2030 * units.mm) * (1275 * units.mm),
            diff_ratio: 4.2,
            tire_radius: 330 * units.mm,
            rolling_resistance: 150 * units.N
        );
}

public node main {
    set_engine(t_f312())
    set_transmission(f312_t_transmission())
    set_vehicle(f312_t())
}
